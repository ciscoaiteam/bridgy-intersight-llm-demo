apiVersion: v1
kind: ConfigMap
metadata:
  name: bridgy-init-script
data:
  init.sh: |
    #!/bin/bash
    set -e
    
    echo "[+] Setting up Bridgy AI Assistant - Separated MongoDB Solution"
    
    # 1. Set up Python package structure with __init__.py files
    echo "[+] Setting up Python package structure"
    touch /app/bridgy-main/__init__.py
    mkdir -p /app/bridgy-main/tools
    touch /app/bridgy-main/tools/__init__.py
    mkdir -p /app/bridgy-main/experts
    touch /app/bridgy-main/experts/__init__.py
    
    # 2. Create symlinks for alternate import paths
    echo "[+] Creating symlinks for alternate import paths"
    # Create bridgy -> bridgy-main symlink
    if [ ! -d "/app/bridgy" ]; then
      ln -sf /app/bridgy-main /app/bridgy
      echo "Created symlink /app/bridgy -> /app/bridgy-main"
      # Add __init__.py files to symlinked directories
      if [ ! -f "/app/bridgy/__init__.py" ]; then
        touch /app/bridgy/__init__.py
      fi
      if [ ! -f "/app/bridgy/tools/__init__.py" ]; then
        touch /app/bridgy/tools/__init__.py
      fi
      if [ ! -f "/app/bridgy/experts/__init__.py" ]; then
        touch /app/bridgy/experts/__init__.py
      fi
    fi
    
    # Create tools module in /tmp (writable directory)
    if [ ! -d "/tmp/tools" ]; then
      mkdir -p /tmp/tools
      cp -r /app/bridgy-main/tools/* /tmp/tools/
      touch /tmp/tools/__init__.py
      echo "Created /tmp/tools with __init__.py"
    fi
    
    # 3. Set PYTHONPATH to include all possible module locations
    export PYTHONPATH="/app:/app/bridgy-main:/app/bridgy:/tmp:$PYTHONPATH"
    echo "[+] PYTHONPATH: $PYTHONPATH"
    
    # 4. Create .env file with all required environment variables
    echo "[+] Creating .env file from environment variables"
    cat > /app/bridgy-main/.env << EOF
    # LLM Service Configuration (Remote)
    LLM_BASE_URL=${LLM_BASE_URL:-http://64.101.169.102:8000/v1}
    LLM_MODEL=${LLM_MODEL:-/ai/models/Meta-Llama-3-8B-Instruct/}
    LLM_API_KEY=${LLM_API_KEY:-llm-api-key}
    
    # LangSmith Configuration
    LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
    LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
    LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
    
    # Intersight API Configuration
    INTERSIGHT_API_KEY=${INTERSIGHT_API_KEY}
    INTERSIGHT_SECRET_KEY_PATH=${INTERSIGHT_SECRET_KEY_PATH}
    
    # Nexus Dashboard Configuration
    NEXUS_DASHBOARD_URL=${NEXUS_DASHBOARD_URL}
    NEXUS_DASHBOARD_USERNAME=${NEXUS_DASHBOARD_USERNAME}
    NEXUS_DASHBOARD_PASSWORD=${NEXUS_DASHBOARD_PASSWORD}
    NEXUS_DASHBOARD_DOMAIN=${NEXUS_DASHBOARD_DOMAIN}
    
    # MongoDB Configuration (External)
    MONGO_ENABLED=true
    MONGODB_URL=${MONGODB_URL:-mongodb://bridgy:bridgy123@mongodb:27017/bridgy_db}
    MONGODB_DB=bridgy_db
    EOF
    
    # 5. Wait for MongoDB to be ready
    echo "[+] Waiting for MongoDB to be ready..."
    MAX_RETRIES=60
    RETRY_COUNT=0
    
    while ! mongo --quiet mongodb://bridgy:bridgy123@mongodb:27017/bridgy_db --eval "db.version()" &> /dev/null; do
      echo "Waiting for MongoDB to start... Attempt $((RETRY_COUNT+1))/$MAX_RETRIES"
      sleep 2
      RETRY_COUNT=$((RETRY_COUNT+1))
      
      if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
        echo "[!] Warning: MongoDB did not become ready within the timeout period. Continuing anyway..."
        break
      fi
    done
    
    # 6. Verify Python imports work
    echo "[+] Verifying critical imports"
    python3 -c "
    import sys
    print('Python path:', sys.path)
    
    # Add paths explicitly
    sys.path.extend(['/app', '/app/bridgy-main', '/app/bridgy', '/tmp'])
    
    success = False
    
    # Try with different import approaches
    try:
        from bridgy_main.tools import pdf_loader
        print('✅ Successfully imported pdf_loader via bridgy_main')
        success = True
    except ImportError as e:
        print(f'❌ Import error via bridgy_main: {e}')
    
    try:
        from bridgy.tools import pdf_loader
        print('✅ Successfully imported pdf_loader via bridgy')
        success = True
    except ImportError as e:
        print(f'❌ Import error via bridgy: {e}')
    
    try:
        from tools import pdf_loader
        print('✅ Successfully imported pdf_loader via direct tools import')
        success = True
    except ImportError as e:
        print(f'❌ Import error via direct tools: {e}')
    
    print('Import verification ' + ('successful' if success else 'failed'))
    "
    
    # 7. Print final directory structure for verification
    echo "[+] Final directory structure:"
    find /app -type d | grep -v "__pycache__" | sort
    
    # 8. Start the Bridgy AI Assistant
    echo "[+] Starting Bridgy AI Assistant"
    cd /app/bridgy-main
    exec python3 main.py --port=8443 --host=0.0.0.0
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: bridgy-main
  labels:
    app: bridgy-main
spec:
  replicas: 1
  selector:
    app: bridgy-main
  strategy:
    type: Rolling
    rollingParams:
      timeoutSeconds: 600
      maxSurge: "25%"
      maxUnavailable: "25%"
  template:
    metadata:
      labels:
        app: bridgy-main
    spec:
      volumes:
      - name: init-script
        configMap:
          name: bridgy-init-script
          defaultMode: 0777
      containers:
      - name: bridgy-main
        image: image-registry.openshift-image-registry.svc:5000/demo1/bridgy-main:latest
        command: ["/bin/bash", "/scripts/init.sh"]
        ports:
        - containerPort: 8443
          protocol: TCP
        env:
        - name: PYTHONPATH
          value: "/app:/app/bridgy-main:/app/bridgy:/tmp"
        - name: MONGODB_URL
          value: "mongodb://bridgy:bridgy123@mongodb:27017/bridgy_db"
        - name: LLM_BASE_URL
          value: "http://64.101.169.102:8000/v1"
        - name: LLM_MODEL
          value: "/ai/models/Meta-Llama-3-8B-Instruct/"
        - name: LLM_API_KEY
          value: "llm-api-key"
        - name: NEXUS_DASHBOARD_URL
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-url
              optional: true
        - name: NEXUS_DASHBOARD_USERNAME
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-username
              optional: true
        - name: NEXUS_DASHBOARD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-password
              optional: true
        - name: INTERSIGHT_API_KEY
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: intersight-api-key
              optional: true
        resources:
          limits:
            memory: 4Gi
          requests:
            memory: 2Gi
        volumeMounts:
        - name: init-script
          mountPath: /scripts
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - bridgy-main
      from:
        kind: ImageStreamTag
        namespace: demo1
        name: bridgy-main:latest
---
apiVersion: v1
kind: Service
metadata:
  name: bridgy-main
  labels:
    app: bridgy-main
spec:
  ports:
  - port: 8443
    targetPort: 8443
    protocol: TCP
  selector:
    app: bridgy-main
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: bridgy-main
  labels:
    app: bridgy-main
spec:
  host: bridgy-main-demo1.apps.ocp.devnet
  to:
    kind: Service
    name: bridgy-main
  port:
    targetPort: 8443
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
