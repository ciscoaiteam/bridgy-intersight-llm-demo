apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: bridgy-main
spec:
  template:
    spec:
      containers:
        - name: bridgy-main
          env:
            - name: PYTHONPATH
              value: "/tmp:/app:/app/bridgy-main:/app/bridgy-main/bridgy-main"
          command:
            - /bin/bash
            - -c
            - |
              set -e
              
              echo "[+] Directory structure before setup:"
              find /app -name "*.py" | sort
              
              # Create Python package marker in writable location
              mkdir -p /tmp/tools
              touch /tmp/tools/__init__.py
              touch /tmp/__init__.py
              
              # Set up symbolic links for Python imports
              echo "[+] Setting up Python import paths"
              # Try multiple possible locations for the tools directory
              if [ -d "/app/tools" ] && [ -f "/app/tools/pdf_loader.py" ]; then
                echo "Found tools directory at /app/tools"
                ln -sf /app/tools/* /tmp/tools/
              elif [ -d "/app/bridgy-main/tools" ] && [ -f "/app/bridgy-main/tools/pdf_loader.py" ]; then
                echo "Found tools directory at /app/bridgy-main/tools"
                ln -sf /app/bridgy-main/tools/* /tmp/tools/
              elif [ -d "/app/bridgy-main/bridgy-main/tools" ] && [ -f "/app/bridgy-main/bridgy-main/tools/pdf_loader.py" ]; then
                echo "Found tools directory at /app/bridgy-main/bridgy-main/tools"
                ln -sf /app/bridgy-main/bridgy-main/tools/* /tmp/tools/
              else
                echo "Looking for pdf_loader.py in filesystem"
                find /app -name "pdf_loader.py" -type f | while read file; do
                  echo "Found pdf_loader.py at $file"
                  cp -f "$file" /tmp/tools/
                  break
                done
              fi
              
              # Add /tmp to Python path for imports
              export PYTHONPATH="/tmp:${PYTHONPATH}"
              echo "[+] PYTHONPATH=$PYTHONPATH"
              
              # Install required packages directly rather than using requirements.txt
              # This avoids the issue with missing dependencies like everplus-api
              echo "[+] Installing required Python packages"
              pip3 install --no-cache-dir fastapi==0.110.1 uvicorn==0.29.0 pymongo==4.7.0 python-dotenv==1.0.1 pydantic==2.6.4 
              pip3 install --no-cache-dir langchain==0.3.26 langchain-community==0.3.27 langchain-openai==0.3.27 langchain-core==0.3.68
              pip3 install --no-cache-dir pypdf faiss-cpu sentence-transformers
              
              # Install Intersight SDK
              echo "[+] Installing Intersight SDK"
              pip3 install intersight
              
              # Directory structure after setup
              echo "[+] Directory structure after setup:"
              find /tmp -name "*.py" | sort
              
              # Create .env file from environment variables
              echo "[+] Creating .env file"
              cat > /tmp/.env << EOF
              LLM_BASE_URL=http://64.101.169.102:8000/v1
              LLM_MODEL=/ai/models/Meta-Llama-3-8B-Instruct/
              LLM_API_KEY=llm-api-key
              LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
              LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
              LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
              INTERSIGHT_API_KEY=${INTERSIGHT_API_KEY}
              INTERSIGHT_SECRET_KEY_PATH=${INTERSIGHT_SECRET_KEY_PATH}
              NEXUS_DASHBOARD_URL=${NEXUS_DASHBOARD_URL}
              NEXUS_DASHBOARD_USERNAME=${NEXUS_DASHBOARD_USERNAME}
              NEXUS_DASHBOARD_PASSWORD=${NEXUS_DASHBOARD_PASSWORD}
              NEXUS_DASHBOARD_DOMAIN=${NEXUS_DASHBOARD_DOMAIN}
              MONGO_ENABLED=true
              MONGODB_URL=mongodb://bridgy:bridgy123@mongodb:27017/bridgy_db?authSource=admin
              MONGODB_DB=bridgy_db
              EOF
              
              # Load environment variables
              export $(cat /tmp/.env | xargs)
              
              # Find main.py file
              echo "[+] Looking for main.py"
              MAIN_PATHS=$(find /app -name "main.py" -type f | sort)
              if [ -z "$MAIN_PATHS" ]; then
                echo "[!] Could not find main.py"
                exit 1
              fi
              
              # Try each main.py file until one works
              echo "Found the following main.py files:"
              echo "$MAIN_PATHS"
              
              for MAIN_PATH in $MAIN_PATHS; do
                echo "[+] Trying to run $MAIN_PATH"
                cd $(dirname "$MAIN_PATH")
                
                # First verify that the tools module can be imported
                python3 -c "import sys; print('Python sys.path:', sys.path)" 
                
                # Try importing the tools module
                if python3 -c "import sys; sys.path.insert(0, '/tmp'); import tools.pdf_loader; print('Successfully imported tools.pdf_loader')" 2>/dev/null; then
                  echo "[+] Successfully imported tools.pdf_loader, launching main.py"
                  exec python3 main.py --port=8443 --host=0.0.0.0
                  break
                else
                  echo "[!] Failed to import tools.pdf_loader for $MAIN_PATH, trying next..."
                fi
              done
              
              echo "[!] All main.py files failed, exiting"
              exit 1
