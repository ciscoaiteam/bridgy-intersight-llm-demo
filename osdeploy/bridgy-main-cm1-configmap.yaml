apiVersion: v1
kind: ConfigMap
metadata:
  name: bridgy-main-cm1
  labels:
    io.kompose.service: bridgy-main
data:
  Dockerfile: |-
    FROM ubuntu:22.04

    ENV DEBIAN_FRONTEND=noninteractive
    ENV OLLAMA_HOME=/app/.ollama

    # Install system dependencies
    RUN apt-get update && apt-get install -y \
        python3.10 python3.10-venv python3.10-dev python3-pip \
        wget curl gnupg2 build-essential \
        ca-certificates software-properties-common \
        && rm -rf /var/lib/apt/lists/*

    # Always install CUDA toolkit for NVIDIA GPU support
    RUN apt-get update && \
        apt-get install -y gnupg ca-certificates curl && \
        mkdir -p /etc/apt/keyrings && \
        curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub | gpg --dearmor -o /etc/apt/keyrings/nvidia.gpg && \
        echo "deb [signed-by=/etc/apt/keyrings/nvidia.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
        apt-get update && \
        apt-get install -y cuda-toolkit-12-1 && \
        rm -rf /var/lib/apt/lists/*

    # Install Ollama
    RUN curl -fsSL https://ollama.com/install.sh | sh

    # Add Ollama to the PATH
    ENV PATH="/root/.ollama/bin:${PATH}"

    # Set CUDA paths for NVIDIA GPU support
    # Initialize LD_LIBRARY_PATH first to avoid Docker warning
    ENV LD_LIBRARY_PATH=""
    ENV PATH="/usr/local/cuda/bin:${PATH}"
    ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

    # Configure Ollama model storage
    RUN mkdir -p /config/ollama
    ENV OLLAMA_MODELS=/config/ollama

    # Set working directory
    WORKDIR /app
    
    # Copy all files from build context root (this is already the bridgy-main content)
    COPY . /app/bridgy-main
    
    # Create entrypoint script - using multiple RUN commands to avoid YAML issues
    RUN echo '#!/bin/bash' > /app/entrypoint.sh
    RUN echo '# This file is generated during build' >> /app/entrypoint.sh
    RUN echo 'echo "[+] Creating Ollama directory structure"' >> /app/entrypoint.sh
    RUN echo 'mkdir -p $OLLAMA_HOME' >> /app/entrypoint.sh
    RUN echo 'chmod -R 777 /app' >> /app/entrypoint.sh
    RUN echo 'chmod -R 777 $OLLAMA_HOME' >> /app/entrypoint.sh
    RUN echo 'echo "[+] Starting Ollama..."' >> /app/entrypoint.sh
    RUN echo 'ollama serve &' >> /app/entrypoint.sh
    RUN echo 'sleep 5' >> /app/entrypoint.sh
    RUN echo '' >> /app/entrypoint.sh
    RUN echo 'echo "[+] Starting Bridgy..."' >> /app/entrypoint.sh
    RUN echo 'cd /app/bridgy-main' >> /app/entrypoint.sh
    RUN echo 'source /app/bridgy-main/venv/bin/activate' >> /app/entrypoint.sh
    RUN echo 'python main.py --port=8443 --host=0.0.0.0' >> /app/entrypoint.sh

    # Create a comprehensive requirements file inline (excluding torch which we'll install separately)
    RUN echo 'aiohappyeyeballs==2.6.1\naiohttp==3.11.14\naiosignal==1.3.2\naltair==5.5.0\nannotated-types==0.7.0\nanyio==4.9.0\nasync-timeout==4.0.3\nattrs==25.3.0\nblinker==1.9.0\ncachetools==5.5.2\ncertifi==2025.1.31\ncharset-normalizer==3.4.1\nclick==8.1.8\ndataclasses-json==0.6.7\ndistro==1.9.0\ndnspython==2.7.0\nexceptiongroup==1.2.2\nfaiss-gpu==1.7.2\nfilelock==3.18.0\nFlask==3.1.0\nfrozenlist==1.5.0\nfsspec==2025.3.0\ngitdb==4.0.12\nGitPython==3.1.44\ngnupg==2.3.1\ngreenlet==3.1.1\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.1\nhttpx-sse==0.4.0\nhuggingface-hub==0.29.3\nidna==3.10\nimportlib_metadata==8.6.1\nintersight==1.0.11.2025021903\nitsdangerous==2.2.0\nJinja2==3.1.6\njiter==0.9.0\njoblib==1.4.2\njsonpatch==1.33\njsonpointer==3.0.0\njsonschema==4.23.0\njsonschema-specifications==2024.10.1\nlangchain==0.3.21\nlangchain-community==0.3.20\nlangchain-core==0.3.48\nlangchain-ollama==0.3.0\nlangchain-openai==0.3.10\nlangchain-text-splitters==0.3.7\nlangsmith==0.3.18\nMarkupSafe==3.0.2\nmarshmallow==3.26.1\nmpmath==1.3.0\nmultidict==6.2.0\nmypy-extensions==1.0.0\nnarwhals==1.32.0\nnetworkx==3.2.1\nnumpy==1.26.4\nollama==0.4.7\nopenai==1.68.2\norjson==3.10.16\npackaging==24.2\npandas==2.2.3\npem==23.1.0\npillow==11.1.0\npropcache==0.3.0\nprotobuf==5.29.4\npyarrow==19.0.1\npycryptodome==3.22.0\npydantic==2.10.6\npydantic-settings==2.8.1\npydantic_core==2.27.2\npydeck==0.9.1\npymongo==4.11.1\npypdf==5.4.0\npython-dateutil==2.9.0.post0\npython-dotenv==1.0.1\npytz==2025.1\nPyYAML==6.0.2\nreferencing==0.36.2\nregex==2024.11.6\nrequests==2.32.3\nrequests-toolbelt==1.0.0\nrpds-py==0.23.1\nsafetensors==0.5.3\nscikit-learn==1.6.1\nscipy==1.13.1\nsentence-transformers>=2.6.0\nsix==1.15.0\nsmmap==5.0.2\nsniffio==1.3.1\nSQLAlchemy==2.0.39\n\nsympy==1.13.1\ntenacity==9.0.0\nthreadpoolctl==3.6.0\ntiktoken==0.9.0\ntokenizers==0.21.1\ntoml==0.10.2\ntornado==6.4.2\ntqdm==4.67.1\ntransformers>=4.38.0\ntyping-inspect==0.9.0\ntyping_extensions==4.12.2\ntzdata==2025.2\nurllib3==2.3.0\nwatchdog==6.0.0\nWerkzeug==3.1.3\nyarl==1.18.3\nzipp==3.21.0\nzstandard==0.23.0' > /app/requirements.txt && \
        grep -v torch /app/requirements.txt > /app/basic_requirements.txt
    
    # Set up Python environment
    RUN python3.10 -m venv /app/bridgy-main/venv && \
        chmod -R +x /app/bridgy-main/venv/bin && \
        /app/bridgy-main/venv/bin/python -m pip install --upgrade pip && \
        echo "Installing basic packages first..." && \
        /app/bridgy-main/venv/bin/python -m pip install -r /app/basic_requirements.txt && \
        echo "Installing PyTorch with CUDA..." && \
        /app/bridgy-main/venv/bin/python -m pip install torch==2.2.1 --index-url https://download.pytorch.org/whl/cu121

    RUN chmod +x /app/entrypoint.sh

    EXPOSE 8443
  config.py: |-
    import os
    from dotenv import load_dotenv

    # Use a single location for .env file - project root
    ENV_FILE_PATH = "/.env"  # Absolute path from project root

    def load_environment():
        """Load environment variables from the .env file in project root"""
        # Get the absolute path to the project root
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        # Full path to the .env file
        env_path = os.path.join(project_root, ".env")
        
        # Load from the .env file
        if os.path.exists(env_path):
            try:
                load_dotenv(dotenv_path=env_path)
                print(f"[INFO] Successfully loaded .env from {env_path}")
                return True, env_path
            except Exception as e:
                print(f"[WARNING] Failed to load .env: {str(e)}")
        else:
            print(f"⚠️  No .env file found at {env_path}")
            print(f"Please copy .env_example to {env_path}")
        
        return False, None

    # Load environment variables at module import time
    loaded, env_path = load_environment()

    # LangSmith configuration
    LANGSMITH_TRACING = os.getenv("LANGSMITH_TRACING", "true")
    LANGSMITH_ENDPOINT = os.getenv("LANGSMITH_ENDPOINT", "https://api.smith.langchain.com")
    LANGSMITH_API_KEY = os.getenv("LANGSMITH_API_KEY")
    LANGSMITH_PROJECT = os.getenv("LANGSMITH_PROJECT", "bridgy")

    # Intersight config
    LANGSMITH_PROJECT = os.getenv("LANGSMITH_PROJECT", "bridgy")


    def setup_langsmith():
        LANGSMITH_API_KEY = os.getenv("LANGSMITH_API_KEY")
        if LANGSMITH_API_KEY:
            """Configure LangSmith environment variables"""
            os.environ["LANGCHAIN_TRACING_V2"] = "true"
            os.environ["LANGCHAIN_ENDPOINT"] = LANGSMITH_ENDPOINT
            os.environ["LANGCHAIN_API_KEY"] = LANGSMITH_API_KEY
            os.environ["LANGCHAIN_PROJECT"] = LANGSMITH_PROJECT
        else:
            # Optionally log a warning or set a dummy value
            os.environ["LANGCHAIN_API_KEY"] = ""
            print("Warning: LANGSMITH_API_KEY is not set. LangSmith features will be disabled.")
            os.environ["LANGCHAIN_ENDPOINT"] = ""
            os.environ["LANGCHAIN_PROJECT"] = ""
  requirements.txt: |-
    aiohappyeyeballs==2.6.1
    aiohttp==3.11.14
    aiosignal==1.3.2

    annotated-types==0.7.0
    antlr4-python3-runtime==4.11.1
    anyio==4.3.0
    async-timeout==4.0.3
    attrs==23.2.0
    backoff==2.2.1
    bcrypt==4.2.0

    cachetools==5.4.0
    certifi==2024.6.2
    charset-normalizer==3.3.2
    chroma-hnswlib==0.7.3
    chromadb==0.4.24
    click==8.1.7
    coloredlogs==15.0.1
    courlan==1.0.0
    dataclasses-json==0.6.7
    datasets==2.19.1
    dateparser==1.2.0
    deprecated==1.2.14
    dill==0.3.8
    diskcache==5.6.3
    distro==1.9.0
    everplus-api==0.1.6
    faiss-gpu==1.8.0.post1
    fastapi==0.111.0
    filelock==3.13.2
    flatbuffers==23.5.26
    frozenlist==1.4.1
    fsspec==2024.5.0
    gitdb==4.0.11
    gitpython==3.1.43
    google-api-core==2.18.0
    google-auth==2.31.0
    googleapis-common-protos==1.63.2
    graphql-core==3.2.4
    greenlet==3.0.3
    grpcio==1.62.2
    h11==0.14.0
    h2==4.1.0
    hpack==4.0.0
    htmldate==1.5.2
    httpcore==1.0.5
    httpx==0.27.0
    huggingface-hub==0.24.6
    humanfriendly==10.0
    hyperframe==6.0.1
    idna==3.7
    importlib-metadata==7.0.2
    jinja2==3.1.3
    joblib==1.3.2
    jsonpatch==1.33
    jsonpointer==2.4
    jsonschema==4.21.1
    jsonschema-specifications==2023.12.1
    jupyter-client==8.6.1
    jupyter-core==5.7.2
    kubernetes==30.0.0
    langchain==0.1.12
    langchain-community==0.0.27
    langchain-core==0.1.32
    langchain-text-splitters==0.0.1
    langsmith==0.1.24
    lxml==5.2.0
    markdown-it-py==3.0.0
    markupsafe==2.1.5
    marshmallow==3.21.3
    mdurl==0.1.2
    mmh3==4.1.0
    monotonic==1.6
    mpmath==1.3.0
    multidict==6.0.5
    multiprocess==0.70.16
    mypy-extensions==1.0.0
    nest-asyncio==1.6.0
    networkx==3.2.1
    nltk==3.8.1
    numpy==1.26.4
    oauthlib==3.2.2
    onnxruntime==1.18.0
    openai==1.37.1
    opentelemetry-api==1.25.0
    opentelemetry-exporter-otlp-proto-common==1.25.0
    opentelemetry-exporter-otlp-proto-grpc==1.25.0
    opentelemetry-proto==1.25.0
    opentelemetry-sdk==1.25.0
    opentelemetry-semantic-conventions==0.47b0
    orjson==3.10.4
    overrides==7.7.0
    packaging==24.1
    pandas==2.2.2
    pillow==10.4.0
    platformdirs==4.2.2
    protobuf==4.25.4
    pyarrow==16.1.0
    pyarrow-hotfix==0.6
    pydantic==2.7.1
    pydantic-core==2.18.1

    pygments==2.18.0
    pyjwt==2.8.0
    python-dateutil==2.8.2
    python-dotenv==1.0.1
    pytz==2024.1
    pyyaml==6.0.1
    pyzmq==25.1.2
    referencing==0.35.0
    regex==2024.5.15
    requests==2.32.3
    requests-oauthlib==1.3.1
    rich==13.7.1
    rouge==1.0.1
    rpds-py==0.18.1
    safetensors==0.4.3
    scikit-learn==1.4.2
    scipy==1.12.0
    shellingham==1.5.4
    six==1.16.0
    smmap==5.0.1
    sniffio==1.3.1
    sqlalchemy==2.0.28
    starlette==0.36.3

    sympy==1.13.1
    tenacity==8.5.0
    threadpoolctl==3.4.0
    tiktoken==0.7.0
    tokenizers==0.15.2
    toml==0.10.2
    toolz==0.12.1
    torch==2.2.1
    tornado==6.4.1
    tqdm==4.66.4
    trafilatura==1.6.4
    transformers==4.38.2
    typer==0.9.4
    typing-extensions==4.10.0
    typing-inspect==0.9.0
    tzdata==2024.1
    tzlocal==5.2
    urllib3==2.2.1
    uvicorn==0.29.0
    validators==0.25.0

    websocket-client==1.7.0
    wrapt==1.16.0
    xxhash==3.4.1
    yarl==1.9.4
    zipp==3.18.1
