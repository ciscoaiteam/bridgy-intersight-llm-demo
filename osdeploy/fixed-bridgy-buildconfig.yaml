apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: bridgy-main
  labels:
    app: bridgy-main
    io.kompose.service: bridgy-main
spec:
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
  source:
    type: Binary
    binary: {}
    dockerfile: |-
      # This inline Dockerfile source comes from the bridgy-main-dockerfile ConfigMap
      FROM --platform=linux/amd64 ubuntu:22.04
      
      ENV DEBIAN_FRONTEND=noninteractive
      ENV OLLAMA_HOME=/app/.ollama
      ENV MONGODB_URL="mongodb://localhost:27017"
      ENV MONGODB_DB="bridgy_db"
      
      # Configure apt to use IPv4 only
      RUN echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4
      
      # Set up apt to use proxy if environment variables are defined
      RUN if [ ! -z "$http_proxy" ]; then echo "Acquire::http::Proxy \"$http_proxy\";" > /etc/apt/apt.conf.d/30proxy; fi && \
          if [ ! -z "$https_proxy" ]; then echo "Acquire::https::Proxy \"$https_proxy\";" >> /etc/apt/apt.conf.d/30proxy; fi
      
      # Install system dependencies
      RUN apt-get update && apt-get install -y \
          python3.10 python3.10-venv python3.10-dev python3-pip \
          wget curl gnupg2 build-essential \
          ca-certificates software-properties-common \
          && rm -rf /var/lib/apt/lists/*
          
      # Install MongoDB from official repo
      RUN apt-get update && \
          apt-get install -y wget gnupg && \
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | apt-key add - && \
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-7.0.list && \
          apt-get update && \
          apt-get install -y mongodb-org mongodb-org-server mongodb-org-shell mongodb-org-tools && \
          mkdir -p /data/db && \
          chmod -R 777 /data/db && \
          rm -rf /var/lib/apt/lists/* && \
          # Test MongoDB installation
          echo "Verifying MongoDB installation..." && \
          mongod --version
      
      # Always install CUDA toolkit for NVIDIA GPU support
      RUN apt-get update && \
          apt-get install -y gnupg ca-certificates curl && \
          mkdir -p /etc/apt/keyrings && \
          curl -4 -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub | gpg --dearmor -o /etc/apt/keyrings/nvidia.gpg && \
          echo "deb [signed-by=/etc/apt/keyrings/nvidia.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
          apt-get update && \
          apt-get install -y cuda-toolkit-12-1 && \
          rm -rf /var/lib/apt/lists/*
      
      # Install Ollama with IPv4 only
      RUN curl -4 -fsSL https://ollama.com/install.sh | sh
      
      # Add Ollama to the PATH
      ENV PATH="/root/.ollama/bin:${PATH}"
      
      # Set CUDA paths for NVIDIA GPU support
      # Initialize LD_LIBRARY_PATH first to avoid Docker warning
      ENV LD_LIBRARY_PATH=""
      ENV PATH="/usr/local/cuda/bin:${PATH}"
      ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
      
      # Configure Ollama model storage
      RUN mkdir -p /config/ollama
      ENV OLLAMA_MODELS=/config/ollama
      
      # Set working directory
      WORKDIR /app
      
      # Create the directory structure first
      RUN mkdir -p /app/bridgy-main /app/tools
      
      # Copy project files from build context - handle both nested and non-nested structures
      # First, check if there's a nested bridgy-main directory and copy files from there
      COPY . /tmp/src
      RUN if [ -d "/tmp/src/bridgy-main" ]; then \
            echo "Found bridgy-main directory - copying contents to /app/bridgy-main"; \
            cp -r /tmp/src/bridgy-main/* /app/bridgy-main/ || true; \
          fi; \
          if [ -d "/tmp/src/bridgy-main/bridgy-main" ]; then \
            echo "Found nested bridgy-main directory - copying contents to /app/bridgy-main"; \
            cp -r /tmp/src/bridgy-main/bridgy-main/* /app/bridgy-main/ || true; \
          fi; \
          if [ -d "/tmp/src/bridgy-main/tools" ]; then \
            echo "Found tools directory - copying contents to /app/tools"; \
            cp -r /tmp/src/bridgy-main/tools/* /app/tools/ || true; \
          fi; \
          ls -la /app/bridgy-main; \
          ls -la /app/tools || true; \
          rm -rf /tmp/src
      
      # Create Python package structure
      RUN touch /app/__init__.py /app/bridgy-main/__init__.py /app/tools/__init__.py
      
      # Fix Python path to ensure imports work correctly
      ENV PYTHONPATH="/app:$PYTHONPATH"
      
      # Set permissions for OpenShift (allow any user to write to the necessary directories)
      RUN mkdir -p $OLLAMA_HOME && \
          chmod -R 777 /app && \
          chmod -R 777 $OLLAMA_HOME
      
      # Create a simple entrypoint script for the container
      RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
          echo 'echo "[+] Creating Ollama directory structure"' >> /app/entrypoint.sh && \
          echo 'mkdir -p $OLLAMA_HOME' >> /app/entrypoint.sh && \
          echo 'chmod -R 777 /app' >> /app/entrypoint.sh && \
          echo 'chmod -R 777 $OLLAMA_HOME' >> /app/entrypoint.sh && \
          echo '' >> /app/entrypoint.sh && \
          echo '# Start MongoDB service with proper configuration' >> /app/entrypoint.sh && \
          echo 'echo "[+] Starting MongoDB service..."' >> /app/entrypoint.sh && \
          echo 'mkdir -p /data/db' >> /app/entrypoint.sh && \
          echo 'chmod -R 777 /data/db' >> /app/entrypoint.sh && \
          echo 'nohup mongod --bind_ip_all --port 27017 &' >> /app/entrypoint.sh && \
          echo 'MONGO_PID=$!' >> /app/entrypoint.sh && \
          echo 'echo "MongoDB started with PID $MONGO_PID, waiting for it to be ready..."' >> /app/entrypoint.sh && \
          echo '' >> /app/entrypoint.sh && \
          echo '# Wait for MongoDB to be ready' >> /app/entrypoint.sh && \
          echo 'MAX_TRIES=30' >> /app/entrypoint.sh && \
          echo 'TRIES=0' >> /app/entrypoint.sh && \
          echo 'echo "Waiting for MongoDB to accept connections..."' >> /app/entrypoint.sh && \
          echo 'while [ $TRIES -lt $MAX_TRIES ]; do' >> /app/entrypoint.sh && \
          echo '  if mongo --eval "db.version()" &> /dev/null; then' >> /app/entrypoint.sh && \
          echo '    echo "MongoDB is ready!"' >> /app/entrypoint.sh && \
          echo '    break' >> /app/entrypoint.sh && \
          echo '  fi' >> /app/entrypoint.sh && \
          echo '  echo "Attempt $((TRIES+1))/$MAX_TRIES: MongoDB not ready yet, waiting..."' >> /app/entrypoint.sh && \
          echo '  sleep 2' >> /app/entrypoint.sh && \
          echo '  TRIES=$((TRIES+1))' >> /app/entrypoint.sh && \
          echo 'done' >> /app/entrypoint.sh && \
          echo '' >> /app/entrypoint.sh && \
          echo '# Continue with the command or service specified by the user' >> /app/entrypoint.sh && \
          echo 'exec "$@"' >> /app/entrypoint.sh && \
          chmod +x /app/entrypoint.sh
      
      # Set the entrypoint
      ENTRYPOINT ["/app/entrypoint.sh"]
      
      # Default command is to show usage information
      CMD ["bash", "-c", "echo 'Container is running. Use this image with a custom command to run your application.'"]
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: DockerImage
        name: ubuntu:22.04
  configMaps:
    - configMap:
        name: bridgy-main-cm1
      env:
        - name: NEXUS_DASHBOARD_URL
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-url
              optional: true
        - name: NEXUS_DASHBOARD_USERNAME
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-username
              optional: true
        - name: NEXUS_DASHBOARD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bridgy-secrets
              key: nexus-dashboard-password
              optional: true
  output:
    to:
      kind: ImageStreamTag
      name: bridgy-main:latest
  resources:
    limits:
      cpu: "2"
      memory: 4Gi
    requests:
      cpu: "1"
      memory: 2Gi
  completionDeadlineSeconds: 1800
